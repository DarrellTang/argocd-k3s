apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
    name: kube-prometheus-stack
    namespace: monitoring
spec:
    chart:
        spec:
            chart: kube-prometheus-stack
            sourceRef:
                kind: HelmRepository
                name: prometheus-community
            version: '*'
    install: {}
    interval: 5m0s
    values:
        additionalPrometheusRulesMap: {}
        alertmanager:
            alertmanagerSpec:
                additionalPeers: []
                affinity: {}
                alertmanagerConfigNamespaceSelector: {}
                alertmanagerConfigSelector: {}
                clusterAdvertiseAddress: false
                configMaps: []
                containers: []
                externalUrl: null
                forceEnableClusterMode: false
                image:
                    repository: quay.io/prometheus/alertmanager
                    sha: ""
                    tag: v0.22.2
                initContainers: []
                listenLocal: false
                logFormat: logfmt
                logLevel: info
                nodeSelector: {}
                paused: false
                podAntiAffinity: ""
                podAntiAffinityTopologyKey: kubernetes.io/hostname
                podMetadata: {}
                portName: web
                priorityClassName: ""
                replicas: 1
                resources: {}
                retention: 120h
                routePrefix: /
                secrets: []
                securityContext:
                    fsGroup: 2000
                    runAsGroup: 2000
                    runAsNonRoot: true
                    runAsUser: 1000
                storage: {}
                tolerations: []
                topologySpreadConstraints: []
                useExistingSecret: false
                volumeMounts: []
                volumes: []
            annotations: {}
            apiVersion: v2
            config:
                global:
                    slack_api_url: ENC[AES256_GCM,data:SsTbYl+vkXz8mSlpUqkI1VS0D0PWIYs4DdTZ+Wi/SrthQnVUSNUTuepVxKH4Mx8/8VT4xGAsP0R/frEqWiXQWdBSo50//sUqh/2PXzv5Fg==,iv:VwKd9K0Hbfn+spdsMqmqQ5R3Zi6nUwJtaZJINHB4GME=,tag:pp5G77HAkUQ76gyAQAVWjg==,type:str]
                    resolve_timeout: 5m
                receivers:
                    - name: "null"
                    - name: slack
                      slack_configs:
                        - channel: '#tang-notifications'
                          send_resolved: true
                          title: |-
                            [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
                            {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
                              {{" "}}(
                              {{- with .CommonLabels.Remove .GroupLabels.Names }}
                                {{- range $index, $label := .SortedPairs -}}
                                  {{ if $index }}, {{ end }}
                                  {{- $label.Name }}="{{ $label.Value -}}"
                                {{- end }}
                              {{- end -}}
                              )
                            {{- end }}
                          text: |-
                            {{ range .Alerts -}} *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                            *Description:* {{ .Annotations.description }}
                            *Details:*
                              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                              {{ end }}
                            {{ end }}
                route:
                    group_by:
                        - job
                    group_interval: 5m
                    group_wait: 30s
                    receiver: slack
                    repeat_interval: 12h
                    routes:
                        - match:
                            alertname: Watchdog
                          receiver: slack
                templates:
                    - /etc/alertmanager/config/*.tmpl
            enabled: true
            extraSecret:
                annotations: {}
                data: {}
            ingress:
                annotations: {}
                enabled: true
                hosts:
                    - alertmanager.tang.local
                ingressClassName: traefik
                labels: {}
                paths:
                    - /
                tls: []
            ingressPerReplica:
                annotations: {}
                enabled: false
                hostDomain: ""
                hostPrefix: ""
                labels: {}
                paths: []
                tlsSecretName: ""
                tlsSecretPerReplica:
                    enabled: false
                    prefix: alertmanager
            podDisruptionBudget:
                enabled: false
                maxUnavailable: ""
                minAvailable: 1
            secret:
                annotations: {}
            service:
                additionalPorts: []
                annotations: {}
                clusterIP: ""
                externalIPs: []
                labels: {}
                loadBalancerIP: 10.0.0.234
                loadBalancerSourceRanges: []
                nodePort: 30903
                port: 9093
                targetPort: 9093
                type: LoadBalancer
            serviceAccount:
                annotations: {}
                create: true
                name: ""
            serviceMonitor:
                bearerTokenFile: null
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                scheme: ""
                selfMonitor: true
                tlsConfig: {}
            servicePerReplica:
                annotations: {}
                enabled: false
                loadBalancerSourceRanges: []
                nodePort: 30904
                port: 9093
                targetPort: 9093
                type: ClusterIP
            templateFiles: {}
            tplConfig: false
        commonLabels: {}
        coreDns:
            enabled: true
            service:
                port: 9153
                targetPort: 9153
            serviceMonitor:
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
        defaultRules:
            additionalRuleLabels: {}
            annotations: {}
            appNamespacesTarget: .*
            create: true
            labels: {}
            rules:
                alertmanager: true
                etcd: true
                general: true
                k8s: true
                kubeApiserver: true
                kubeApiserverAvailability: true
                kubeApiserverError: true
                kubeApiserverSlos: true
                kubePrometheusGeneral: true
                kubePrometheusNodeAlerting: true
                kubePrometheusNodeRecording: true
                kubeScheduler: true
                kubeStateMetrics: true
                kubelet: true
                kubernetesAbsent: true
                kubernetesApps: true
                kubernetesResources: true
                kubernetesStorage: true
                kubernetesSystem: true
                network: true
                node: true
                prometheus: true
                prometheusOperator: true
                time: true
            runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
        fullnameOverride: ""
        global:
            imagePullSecrets: []
            rbac:
                create: true
                pspAnnotations: {}
                pspEnabled: true
        grafana:
            additionalDataSources: []
            adminPassword: ENC[AES256_GCM,data:8hx0XMYKp3CgxMsf5Bxumv7ZfgVmsGmnmJqN,iv:dcoNBJzH8rv67xJZtKLDZ3wwqb3VyTpjZ2McGA1Lf+g=,tag:sZDzMHzq/zdoX6ui5T+XWg==,type:str]
            defaultDashboardsEnabled: true
            enabled: true
            extraConfigmapMounts: []
            forceDeployDashboards: false
            forceDeployDatasources: false
            grafana.ini:
                server:
                    domain: grafana.tang.local
                    root_url: http://10.0.0.250/grafana
                    serve_from_sub_path: true
            ingress:
                annotations:
                    kubernetes.io/ingress.class: traefik
                enabled: true
                hosts:
                    - grafana.tang.local
                labels: {}
                path: /
                tls: []
            namespaceOverride: ""
            service:
                portName: service
                type: LoadBalancer
                loadBalancerIP: 10.0.0.235
            serviceMonitor:
                interval: ""
                metricRelabelings: []
                path: /metrics
                relabelings: []
                selfMonitor: true
            sidecar:
                dashboards:
                    annotations: {}
                    enabled: true
                    label: grafana_dashboard
                    multicluster:
                        etcd:
                            enabled: false
                        global:
                            enabled: false
                    provider:
                        allowUiUpdates: false
                datasources:
                    annotations: {}
                    createPrometheusReplicasDatasources: false
                    defaultDatasourceEnabled: true
                    enabled: true
                    label: grafana_datasource
        kube-state-metrics:
            namespaceOverride: ""
            podSecurityPolicy:
                enabled: true
            rbac:
                create: true
        kubeApiServer:
            enabled: true
            serviceMonitor:
                interval: ""
                jobLabel: component
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                selector:
                    matchLabels:
                        component: apiserver
                        provider: kubernetes
            tlsConfig:
                insecureSkipVerify: false
                serverName: kubernetes
        kubeControllerManager:
            enabled: false
            endpoints:
                - 10.0.0.250
            service:
                enabled: true
                port: 10252
                targetPort: 10252
            serviceMonitor:
                enabled: true
                https: false
                insecureSkipVerify: null
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                serverName: null
        kubeDns:
            enabled: false
            service:
                dnsmasq:
                    port: 10054
                    targetPort: 10054
                skydns:
                    port: 10055
                    targetPort: 10055
            serviceMonitor:
                dnsmasqMetricRelabelings: []
                dnsmasqRelabelings: []
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
        kubeEtcd:
            enabled: false
            endpoints: []
            service:
                enabled: true
                port: 2379
                targetPort: 2379
            serviceMonitor:
                caFile: ""
                certFile: ""
                enabled: true
                insecureSkipVerify: false
                interval: ""
                keyFile: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                scheme: http
                serverName: ""
        kubeProxy:
            enabled: true
            endpoints: []
            service:
                enabled: true
                port: 10249
                targetPort: 10249
            serviceMonitor:
                enabled: true
                https: false
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
        kubeScheduler:
            enabled: false
            endpoints:
                - 10.0.0.250
            service:
                enabled: true
                port: 10251
                targetPort: 10251
            serviceMonitor:
                enabled: true
                https: false
                insecureSkipVerify: null
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                serverName: null
        kubeStateMetrics:
            enabled: true
            serviceMonitor:
                interval: ""
                metricRelabelings: []
                namespaceOverride: ""
                proxyUrl: ""
                relabelings: []
                selectorOverride: {}
                selfMonitor:
                    enabled: false
        kubeTargetVersionOverride: ""
        kubeVersionOverride: ""
        kubelet:
            enabled: true
            namespace: kube-system
            serviceMonitor:
                cAdvisor: true
                cAdvisorMetricRelabelings: []
                cAdvisorRelabelings:
                    - sourceLabels:
                        - __metrics_path__
                      targetLabel: metrics_path
                https: true
                interval: ""
                metricRelabelings: []
                probes: true
                probesMetricRelabelings: []
                probesRelabelings:
                    - sourceLabels:
                        - __metrics_path__
                      targetLabel: metrics_path
                proxyUrl: ""
                relabelings:
                    - sourceLabels:
                        - __metrics_path__
                      targetLabel: metrics_path
                resource: false
                resourcePath: /metrics/resource/v1alpha1
                resourceRelabelings:
                    - sourceLabels:
                        - __metrics_path__
                      targetLabel: metrics_path
        nameOverride: ""
        namespaceOverride: ""
        nodeExporter:
            enabled: true
            jobLabel: jobLabel
            serviceMonitor:
                interval: ""
                metricRelabelings: []
                proxyUrl: ""
                relabelings: []
                scrapeTimeout: ""
        prometheus:
            additionalPodMonitors: []
            additionalRulesForClusterRole: []
            additionalServiceMonitors: []
            annotations: {}
            enabled: true
            extraSecret:
                annotations: {}
                data: {}
            ingress:
                annotations: {}
                enabled: true
                ingressClassName: traefik
                hosts:
                    - prometheus.tang.local
                labels: {}
                paths:
                    - /
                tls: []
            ingressPerReplica:
                annotations: {}
                enabled: false
                hostDomain: ""
                hostPrefix: ""
                labels: {}
                paths: []
                tlsSecretName: ""
                tlsSecretPerReplica:
                    enabled: false
                    prefix: prometheus
            podDisruptionBudget:
                enabled: false
                maxUnavailable: ""
                minAvailable: 1
            podSecurityPolicy:
                allowedCapabilities: []
                allowedHostPaths: []
                volumes: []
            prometheusSpec:
                additionalAlertManagerConfigs: []
                additionalAlertManagerConfigsSecret: {}
                additionalAlertRelabelConfigs: []
                additionalPrometheusSecretsAnnotations: {}
                additionalRemoteRead: []
                additionalRemoteWrite: []
                additionalScrapeConfigs:
                    - job_name: blackbox
                      metrics_path: /probe
                      params:
                        module:
                            - http_2xx
                      static_configs:
                        # Add URLs as target parameter
                        - targets:
                            - http://magicmirror.tang.local
                            - http://prometheus.tang.local
                            - http://alertmanager.tang.local
                            - http://grafana.tang.local
                            - http://pihole.tang.local
                      relabel_configs:
                        - source_labels:
                            - __address__
                          target_label: __param_target
                        - source_labels:
                            - __param_target
                          # Important!
                          target_label: target
                          # Ensure blackbox-exporter is reachable from Prometheus
                        - target_label: __address__
                          replacement: blackbox-exporter-prometheus-blackbox-exporter.monitoring:9115
                additionalScrapeConfigsSecret: {}
                affinity: {}
                alertingEndpoints: []
                allowOverlappingBlocks: false
                apiserverConfig: {}
                arbitraryFSAccessThroughSMs: false
                configMaps: []
                containers: []
                disableCompaction: false
                enableAdminAPI: false
                enableFeatures: []
                enforcedNamespaceLabel: ""
                enforcedSampleLimit: false
                evaluationInterval: ""
                externalLabels: {}
                externalUrl: ""
                ignoreNamespaceSelectors: false
                image:
                    repository: quay.io/prometheus/prometheus
                    sha: ""
                    tag: v2.28.1
                initContainers: []
                listenLocal: false
                logFormat: logfmt
                logLevel: info
                nodeSelector: {}
                overrideHonorLabels: false
                overrideHonorTimestamps: false
                paused: false
                podAntiAffinity: ""
                podAntiAffinityTopologyKey: kubernetes.io/hostname
                podMetadata: {}
                podMonitorNamespaceSelector: {}
                podMonitorSelector: {}
                podMonitorSelectorNilUsesHelmValues: true
                portName: web
                priorityClassName: ""
                probeNamespaceSelector: {}
                probeSelector: {}
                probeSelectorNilUsesHelmValues: true
                prometheusExternalLabelName: ""
                prometheusExternalLabelNameClear: false
                prometheusRulesExcludedFromEnforce: []
                query: {}
                queryLogFile: false
                remoteRead: []
                remoteWrite: []
                remoteWriteDashboards: false
                replicaExternalLabelName: ""
                replicaExternalLabelNameClear: false
                replicas: 1
                resources: {}
                retention: 10d
                retentionSize: ""
                routePrefix: /
                ruleNamespaceSelector: {}
                ruleSelector: {}
                ruleSelectorNilUsesHelmValues: true
                scrapeInterval: ""
                scrapeTimeout: ""
                secrets: []
                securityContext:
                    fsGroup: 2000
                    runAsGroup: 2000
                    runAsNonRoot: true
                    runAsUser: 1000
                serviceMonitorNamespaceSelector: {}
                serviceMonitorSelector:
                    matchLabels:
                        app: magicmirror
                        monitor_http: "true"
                serviceMonitorSelectorNilUsesHelmValues: true
                shards: 1
                storageSpec: {}
                thanos: {}
                tolerations: []
                topologySpreadConstraints: []
                volumeMounts: []
                volumes: []
                walCompression: false
                web: {}
            service:
                annotations: {}
                clusterIP: ""
                externalIPs: []
                labels: {}
                loadBalancerIP: 10.0.0.233
                loadBalancerSourceRanges: []
                nodePort: 30090
                port: 9090
                sessionAffinity: ""
                targetPort: 9090
                type: LoadBalancer
            serviceAccount:
                annotations: {}
                create: true
                name: ""
            serviceMonitor:
                bearerTokenFile: null
                interval: ""
                metricRelabelings: []
                relabelings: []
                scheme: ""
                selfMonitor: true
                tlsConfig: {}
            servicePerReplica:
                annotations: {}
                enabled: false
                loadBalancerSourceRanges: []
                nodePort: 30091
                port: 9090
                targetPort: 9090
                type: ClusterIP
            thanosIngress:
                annotations: {}
                enabled: false
                hosts: []
                labels: {}
                nodePort: 30901
                paths: []
                servicePort: 10901
                tls: []
            thanosService:
                annotations: {}
                clusterIP: None
                enabled: false
                labels: {}
                nodePort: 30901
                port: 10901
                portName: grpc
                targetPort: grpc
                type: ClusterIP
            thanosServiceExternal:
                annotations: {}
                enabled: false
                labels: {}
                loadBalancerIP: ""
                loadBalancerSourceRanges: []
                nodePort: 30901
                port: 10901
                portName: grpc
                targetPort: grpc
                type: LoadBalancer
        prometheus-node-exporter:
            extraArgs:
                - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
                - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
            namespaceOverride: ""
            podLabels:
                jobLabel: node-exporter
        prometheusOperator:
            admissionWebhooks:
                caBundle: ""
                certManager:
                    enabled: false
                enabled: false
                failurePolicy: Fail
                patch:
                    affinity: {}
                    enabled: false
                    image:
                        pullPolicy: IfNotPresent
                        repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
                        sha: f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
                        tag: v1.0
                    nodeSelector: {}
                    podAnnotations: {}
                    priorityClassName: ""
                    resources: {}
                    securityContext:
                        runAsGroup: 2000
                        runAsNonRoot: true
                        runAsUser: 2000
                    tolerations: []
            affinity: {}
            alertmanagerInstanceNamespaces: []
            configReloaderCpu: 100m
            configReloaderMemory: 50Mi
            denyNamespaces: []
            dnsConfig: {}
            enabled: true
            hostNetwork: false
            image:
                pullPolicy: IfNotPresent
                repository: quay.io/prometheus-operator/prometheus-operator
                sha: ""
                tag: v0.50.0
            kubeletService:
                enabled: true
                namespace: kube-system
            namespaces: {}
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            prometheusConfigReloaderImage:
                repository: quay.io/prometheus-operator/prometheus-config-reloader
                sha: ""
                tag: v0.50.0
            prometheusInstanceNamespaces: []
            resources: {}
            secretFieldSelector: ""
            securityContext:
                fsGroup: 65534
                runAsGroup: 65534
                runAsNonRoot: true
                runAsUser: 65534
            service:
                additionalPorts: []
                annotations: {}
                clusterIP: ""
                externalIPs: []
                labels: {}
                loadBalancerIP: 10.0.0.239
                loadBalancerSourceRanges: []
                nodePort: 30080
                nodePortTls: 30443
                type: LoadBalancer
            serviceAccount:
                create: true
                name: ""
            serviceMonitor:
                interval: ""
                metricRelabelings: []
                relabelings: []
                scrapeTimeout: ""
                selfMonitor: true
            thanosImage:
                repository: quay.io/thanos/thanos
                sha: ""
                tag: v0.17.2
            thanosRulerInstanceNamespaces: []
            tls:
                enabled: false
                internalPort: 10250
                tlsMinVersion: VersionTLS13
            tlsProxy:
                enabled: false
            tolerations: []
        server:
            baseURL: http://prometheus.tang.local
            prefixURL: /
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age: []
    lastmodified: "2021-12-16T04:31:39Z"
    mac: ENC[AES256_GCM,data:BYLfaDiFWd/9S1MFuQ2GvpB8PkzAhQKw01XfQBkTiLunu44nSYKGsXvrTeGqZr415pIYU2OaVuyC+cpk36dzuVq1WsYgqZIMQkf1EkBZR1bao6kH0yTVsr/h+J7SyqqznwU7ybDEMGcQx5Vlq1E367SoWX3aqDrL+O6DCWgMzt4=,iv:5VeNeuAsJWdSSsIIoZR0cSu9yZxT0onfSkjN4Y3kyBE=,tag:KsUMdspbd1cwJjXrm1WnGw==,type:str]
    pgp:
        - created_at: "2021-12-16T04:28:41Z"
          enc: |
            -----BEGIN PGP MESSAGE-----

            hQIMA90EKjQRf4iCAQ/8DbEfBDEcoeDZ7TXaryXpxV+XaV/L3bPP7Pb+B+wovA4l
            ymrv67rd8CLnv2xVWrzRuawVcy1/TWGypqicuYe2JfIsRsBoFC8Q783rH9MC6l8i
            hkF8/vgl6liSJmIY6NMxgc4a7ybz/DO176KddcpgDMiVnxVRShyWl6yrrV0bFB8L
            Gix4ycaR8tMPFsYdlsYecI7K/jgvbPwBsyPIHHTyNdpJ7nEiPEVTGajSVvt4UPKV
            NEAIrmJA6+dsKTFmu0t1k9uuB9BAAn27cEcwiew8rz8nVSGSsNkIQhRxcDMnaTIN
            bod/3co4r+zN2P/xioi0tvozpuk4+O7rIIl2PvvEPGrqeGboS6e0qPIOYMnho6F2
            QERlGlKuKxT8QHMNZu8XjAqZ3WZTGlk7RBsQWNaCXSF5m6rttV4d+VNHkLtJyrdN
            ei74SdOL0VDXbYl82aCT53mOd0gBdyl8+tlXDZhZ3u0tkYsmL+NOquaAqoWcTWbi
            cBgdAxbPcUu8LCTliNQ010BB0ej2C4BLpZjkWR3vJ4TvGsh+tyjauaTyT2lxj5+E
            wyGAETA0lqZgsfzrD7kDKhgO8R6elzqSKemVVpwkjZaet9DXvv7SIHDpVbWQoZuY
            FCaRkQbgRoN4IKs5ruzU0YdFVsm1hBLN5imlmcejSxp1bjDEGTDejJpGZW69WLvS
            XgEbo87ghoxg8T4AQc4QN6YL1WPKBopBqBrkY8ji76F2mT82oGtoj5nqHXH1GB5O
            hEsDWAcm0JP3B52mEgkNNbtfQ8mWb66Vj+Ikox2nnnH67HEvuygywK7tx2gMwwo=
            =t67y
            -----END PGP MESSAGE-----
          fp: 54701B50AECAE3FEF87F71A0BD70576CE61A39D8
    encrypted_regex: ^(data|stringData|slack_api_url|adminPassword)$
    version: 3.7.1
